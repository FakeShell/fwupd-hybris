#!/usr/bin/python3
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (C) 2024 Bardia Moshiri <fakeshell@bardia.tech>

from os import popen, listdir
from os.path import exists, join
from platform import release, machine
import re
import sys

import asyncio
import psutil
import dbus

from dbus_next.aio import MessageBus
from dbus_next.service import ServiceInterface, method, dbus_property
from dbus_next.constants import PropertyAccess
from dbus_next import Variant, DBusError, BusType

class FWUPDInterface(ServiceInterface):
    def __init__(self, loop, bus):
        super().__init__('org.freedesktop.fwupd')
        self.loop = loop
        self.bus = bus
        self.props = {
            'DaemonVersion': Variant('s', '1.9.21'),
            'HostBkc': Variant('s', ''),
            'HostVendor': Variant('s', ''),
            'HostProduct': Variant('s', ''),
            'HostMachineId': Variant('s',''),
            'HostSecurityId': Variant('s', '1'),
            'Tainted': Variant('b', False),
            'Interactive': Variant('b', False),
            'Status': Variant('u', 1),
            'Percentage': Variant('u', 0),
            'BatteryLevel': Variant('u', 101), # 101 means unknown
            'OnlyTrusted': Variant('b', True),
            # anything from here onwards is not shown as properties, they are used by methods instead,
            'Devices': Variant('aa{sv}', []),
            'Plugins': Variant('aa{sv}', [{'Name': Variant('s', 'hybris')}]),
            'Metadata': Variant('a{ss}', {
                    'CompileVersion(org.freedesktop.fwupd)': '1.9.21',
                    'DistroId': '',
                    'KernelCmdline': '',
                    'CompileVersion(com.hughsie.libxmlb)': '0.3.14',
                    'CompileVersion(com.hughsie.libjcat)': '0.2.0',
                    'HostFirmwareMajorRelease': '01',
                    'KernelName': 'Linux',
                    'DisplayState': 'connected',
                    'HostProduct': '',
                    'BootTime': '',
                    'CompileVersion(org.freedesktop.gusb)': '0.4.5',
                    'FwupdSupported': 'True',
                    'KernelVersion': '',
                    'DistroName': '',
                    'DistroPrettyName': '',
                    'RuntimeVersion(org.freedesktop.gusb)': '0.4.5',
                    'RuntimeVersion(com.hughsie.libjcat)': '0.2.0',
                    'HostVendor': '',
                    'HostFamily': '',
                    'CpuArchitecture': '',
                    'RuntimeVersion(org.kernel)': '',
                    'RuntimeVersion(org.freedesktop.fwupd)': '1.9.5'
                }
            )
        }

        self.set_props()

    def set_props(self):
        vendor = self.extract_prop('ro.product.vendor.manufacturer')
        self.props['HostVendor'] = Variant('s', vendor.upper() if vendor != '' else '')

        codename = self.extract_prop('ro.product.vendor.name')
        self.props['HostProduct'] = Variant('s', codename.upper() if codename != '' else '')

        if exists("/etc/machine-id"):
            with open("/etc/machine-id", "r") as machine_id_file:
                machine_id = machine_id_file.read()
        else:
            machine_id = ""

        self.props['HostMachineId'] = Variant('s', machine_id)

        try:
            with open('/proc/bootconfig', 'r') as file:
                for line in file:
                    if 'androidboot.bootloader' in line:
                        parts = line.split('=')
                        if len(parts) == 2:
                            bootloader = parts[1].strip().strip('"')
                    if 'androidboot.serialno' in line:
                        parts = line.split('=')
                        if len(parts) == 2:
                            bootloader_serialno = parts[1].strip().strip('"')
        except Exception:
            bootloader = self.extract_prop('ro.bootloader')

        if bootloader:
            arr_bootloader = {
                'DeviceId': Variant('s', '1'),
                'Name': Variant('s', bootloader),
                'Vendor': Variant('s', f'{vendor.capitalize()} Bootloader' if vendor != '' else ''),
                'Version': Variant('s', '1'),
                'Plugin': Variant('s', 'hybris'),
                'Protocol': Variant('s', 'hybris'),
                'Flags': Variant('t', 7),
                'Serial': Variant('s', bootloader_serialno if bootloader_serialno != '' else '')
            }

            self.props['Devices'].value.append(arr_bootloader)

        try:
            modem_ver = ''
            modem_rev = ''
            bus = dbus.SystemBus()
            manager = dbus.Interface(bus.get_object('org.ofono', '/'), 'org.ofono.Manager')
            modems = manager.GetModems()
            for properties in modems:
                if "Revision" in properties:
                    modem_rev = properties["Revision"]
                if "Serial" in properties:
                    modem_serial = properties["Serial"]
                if "SoftwareVersionNumber" in properties:
                    modem_ver = properties["SoftwareVersionNumber"]

            ofono = True
        except Exception as e:
            ofono = False

        if ofono and modem_rev != '':
            arr_modem = {
                'DeviceId': Variant('s', '1'),
                'Name': Variant('s', modem_rev),
                'Vendor': Variant('s', f'{vendor.capitalize()} Modem' if vendor != '' else ''),
                'Version': Variant('s', modem_ver if modem_ver != '' else '1'),
                'Plugin': Variant('s', 'hybris'),
                'Protocol': Variant('s', 'hybris'),
                'Flags': Variant('t', 7),
                'Serial': Variant('s', modem_serial if modem_serial != '' else '')
            }

            self.props['Devices'].value.append(arr_modem)

        sensor_hal = ['1.0', '2.0', '2.1']
        sensor_out = ""

        for version in sensor_hal:
            command = f'binder-call -d /dev/hwbinder android.hardware.sensors@{version}::ISensors/default 1 reply i32 "[ {{ i32 i32 hstr hstr i32 }} ]"'
            sensor_out = popen(command).read()

            if sensor_out.strip():
                # print(f"Successful output with version {version}")
                break

        if sensor_out.strip():
            pattern = re.compile(r'{ (\d+) \d+ "([^"]+)"H "([^"]+)"H (\d+) }')
            matches = pattern.findall(sensor_out)

            if matches:
                for match in matches:
                    sensor_id, sensor_name, sensor_vendor, sensor_ver = match
                    # print(f"Sensor: {sensor_name}\nVendor: {sensor_vendor}\nVersion: {sensor_ver}\n")

                    arr_sensor = {
                        'DeviceId': Variant('s', '1'),
                        'Name': Variant('s', sensor_name),
                        'Vendor': Variant('s', sensor_vendor if sensor_vendor != '' else ''),
                        'Version': Variant('s', sensor_ver if sensor_ver != '' else '1'),
                        'Plugin': Variant('s', 'hybris'),
                        'Protocol': Variant('s', 'hybris'),
                        'Flags': Variant('t', 7),
                        'Serial': Variant('s', sensor_id if sensor_id != '' else '')
                    }

                    self.props['Devices'].value.append(arr_sensor)

        pci_dev = self.parse_pci_devices()
        if pci_dev:
            for device in pci_dev:
                # print(f"Vendor: {device['vendor_name']}, Device: {device['device_name']}")
                pci_array = {
                    'DeviceId': Variant('s', '1'),
                    'Name': Variant('s', device['device_name']),
                    'Vendor': Variant('s', device['vendor_name'] if device['vendor_name'] != '' else ''),
                    'VendorId': Variant('s', device['vendor_id'] if device['vendor_id'] != '' else ''),
                    'Version': Variant('s', device['version']),
                    'Plugin': Variant('s', 'hybris'),
                    'Protocol': Variant('s', 'hybris'),
                    'Flags': Variant('t', 7),
                    'Serial': Variant('s','')
                }

                self.props['Devices'].value.append(pci_array)

        usb_dev = self.parse_usb_devices()
        if usb_dev:
            for device in usb_dev:
                # print(f"Vendor: {device['vendor_name']}, Device: {device['device_name']}")
                usb_array = {
                    'DeviceId': Variant('s', '1'),
                    'Name': Variant('s', device['device_name']),
                    'Vendor': Variant('s', device['vendor_name'] if device['vendor_name'] != '' else ''),
                    'VendorId': Variant('s', device['vendor_id'] if device['vendor_id'] != '' else ''),
                    'Version': Variant('s', device['version']),
                    'Plugin': Variant('s', 'hybris'),
                    'Protocol': Variant('s', 'hybris'),
                    'Flags': Variant('t', 7),
                    'Serial': Variant('s', device['serial'] if device['serial'] != '' else '')
                }

                self.props['Devices'].value.append(usb_array)

        scsi_dev = self.parse_scsi_devices()
        if scsi_dev:
            for device in scsi_dev:
                # print(f"Vendor: {device['vendor_name']}, Device: {device['device_name']}")
                scsi_array = {
                    'DeviceId': Variant('s', '1'),
                    'Name': Variant('s', device['device']),
                    'Vendor': Variant('s', device['vendor']),
                    'Version': Variant('s', device['version']),
                    'Plugin': Variant('s', 'hybris'),
                    'Protocol': Variant('s', 'hybris'),
                    'Flags': Variant('t', 7),
                    'Serial': Variant('s', device['serial'])
                }

                self.props['Devices'].value.append(scsi_array)

        hw_info_data = self.read_hw_info("/sys/class/hw_info/hw_info_data/hw_info_read")
        if hw_info_data:
            parsed_info = self.parse_hw_info(hw_info_data)
            for section, device in parsed_info.items():
                hw_info_array = {
                    'DeviceId': Variant('s', '1'),
                    'Name': Variant('s', f"{section} {device['chip']}" if device['chip'] != '' else section),
                    'Vendor': Variant('s', device['vendor'] if device['vendor'] != '' else ''),
                    'Version': Variant('s', device['id'] if device['id'] != '' else ''),
                    'Plugin': Variant('s', 'hybris'),
                    'Protocol': Variant('s', 'hybris'),
                    'Flags': Variant('t', 7),
                    'Serial': Variant('s', device['id'] if device['id'] != '' else '')
                }

                self.props['Devices'].value.append(hw_info_array)

        with open('/proc/cmdline', 'r') as file:
            cmdline = file.read().strip()

        self.props['Metadata'].value['KernelCmdline'] = cmdline

        distro_id = self.parse_os_release('ID')
        distro_name = self.parse_os_release('NAME')
        distro_pretty_name = self.parse_os_release('PRETTY_NAME')

        if distro_id is not None:
            self.props['Metadata'].value['DistroId'] = distro_id
        if distro_name is not None:
            self.props['Metadata'].value['DistroName'] = distro_name
        if distro_pretty_name is not None:
            self.props['Metadata'].value['DistroPrettyName'] = distro_pretty_name
        if vendor:
            self.props['Metadata'].value['HostVendor'] = vendor
        if codename:
            self.props['Metadata'].value['HostProduct'] = codename

        kernel_version = release()
        self.props['Metadata'].value['KernelVersion'] = kernel_version
        self.props['Metadata'].value['RuntimeVersion(org.kernel)'] = kernel_version
        cpu_arch = machine()
        self.props['Metadata'].value['CpuArchitecture'] = cpu_arch
        self.props['Metadata'].value['BootTime'] = str(int(psutil.boot_time()))

        dt_compat = self.extract_dt_compat()
        self.props['Metadata'].value['HostFamily'] = dt_compat

    @dbus_property(access=PropertyAccess.READ)
    async def DaemonVersion(self) -> 's':
        return self.props['DaemonVersion'].value

    @dbus_property(access=PropertyAccess.READ)
    async def HostBkc(self) -> 's':
        return self.props['HostBkc'].value

    @dbus_property(access=PropertyAccess.READ)
    async def HostVendor(self) -> 's':
        return self.props['HostVendor'].value

    @dbus_property(access=PropertyAccess.READ)
    async def HostProduct(self) -> 's':
        return self.props['HostProduct'].value

    @dbus_property(access=PropertyAccess.READ)
    async def HostMachineId(self) -> 's':
        return self.props['HostMachineId'].value

    @dbus_property(access=PropertyAccess.READ)
    async def HostSecurityId(self) -> 's':
        return self.props['HostSecurityId'].value

    @dbus_property(access=PropertyAccess.READ)
    async def Tainted(self) -> 'b':
        return self.props['Tainted'].value

    @dbus_property(access=PropertyAccess.READ)
    async def Interactive(self) -> 'b':
        return self.props['Interactive'].value

    @dbus_property(access=PropertyAccess.READ)
    async def Status(self) -> 'u':
        return self.props['Status'].value

    @dbus_property(access=PropertyAccess.READ)
    async def Percentage(self) -> 'u':
        return self.props['Percentage'].value

    @dbus_property(access=PropertyAccess.READ)
    async def BatteryLevel(self) -> 'u':
        return self.props['BatteryLevel'].value

    @dbus_property(access=PropertyAccess.READ)
    async def OnlyTrusted(self) -> 'b':
        return self.props['OnlyTrusted'].value

    @method()
    def GetDevices(self) -> 'aa{sv}':
        return self.props['Devices'].value

    @method()
    def GetPlugins(self) -> 'aa{sv}':
        return self.props['Plugins'].value

    # anything from here onwards is mostly useless, implemented for sake of completeness
    @method()
    def GetReleases(self, device_id: 's') -> 'aa{sv}':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NothingToDo', 'No releases found')

    @method()
    def GetDowngrades(self, device_id: 's') -> 'aa{sv}':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NothingToDo', 'No releases found')

    @method()
    def GetUpgrades(self, device_id: 's') -> 'aa{sv}':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NothingToDo', 'No releases found')

    @method()
    def GetDetails(self, handle: 'h') -> 'aa{sv}':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NothingToDo', 'No releases found')

    @method()
    def GetHistory(self) -> 'aa{sv}':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NothingToDo', 'No history')

    @method()
    def GetHostSecurityAttrs(self) -> 'aa{sv}':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotSupported', 'HSI support not enabled')

    @method()
    def GetHostSecurityEvents(self, limit: 'u') -> 'aa{sv}':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotSupported', 'HSI support not enabled')

    @method()
    def GetReportMetadata(self) -> 'a{ss}':
        return self.props['Metadata'].value

    @method()
    def SetHints(self, hints: 'a{ss}'):
        pass

    @method()
    def Install(self, id: 's', handle: 'h', options: 'a{sv}'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.Internal', 'unsupported feature')

    @method()
    def Verify(self, id: 's'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.Internal', 'invalid device ID: {id}')

    @method()
    def Unlock(self, id: 's'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.Internal', 'invalid device ID: {id}')

    @method()
    def Activate(self, id: 's'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.Internal', 'invalid device ID: {id}')

    @method()
    def GetResults(self, id: 's') -> 'a{sv}':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NothingToDo', 'Failed to find {id} in history database: No devices found')

    @method()
    def GetRemotes(self) -> 'aa{sv}':
        return []

    @method()
    def GetApprovedFirmware(self) -> 'as':
        return []

    @method()
    def SetApprovedFirmware(self, checksums: 'as'):
        pass

    @method()
    def GetBlockedFirmware(self) -> 'as':
        return []

    @method()
    def SetBlockedFirmware(self, checksums: 'as'):
        pass

    @method()
    def SetFeatureFlags(self, feature_flags: 't'):
        pass

    @method()
    def ClearResults(self, id: 's'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NothingToDo', 'Failed to find {id} in history database: No devices found')

    @method()
    def ModifyDevice(self, device_id: 's', key: 's', value: 's'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotSupported', 'key {key} not supported')

    @method()
    def ModifyConfig(self, key: 's', value: 's'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotFound', 'key {key} not supported for [{value}]')

    @method()
    def UpdateMetadata(self, remote_id: 's', data: 'h', signature: 'h'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotFound', 'remote {remote_id} not found')

    @method()
    def ModifyRemote(self, remote_id: 's', key: 's', value: 's'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotFound', 'key {key} not supported')

    @method()
    def FixHostSecurityAttr(self, appstream_id: 's'):
        pass

    @method()
    def UndoHostSecurityAttr(self, appstream_id: 's'):
        pass

    @method()
    def SelfSign(self, data: 's', options: 'a{sv}') -> 's':
        return ''

    @method()
    def SetBiosSettings(self, settings: 'a{ss}'):
        pass

    @method()
    def GetBiosSettings(self) -> 'aa{sv}':
        return []

    @method()
    def Inhibit(self, reason: 's') -> 's':
        return ''

    @method()
    def Uninhibit(self, inhibit_id: 's'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotFound', 'Cannot find inhibit ID')

    @method()
    def Quit(self):
        sys.exit(0)

    @method()
    def EmulationLoad(self, data: 'ay'):
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotSupported', 'emulation is not allowed from config')

    @method()
    def EmulationSave(self) -> 'ay':
        # useless, this script is only used for debugging and logging for now.
        raise DBusError('org.freedesktop.fwupd.NotSupported', 'emulation is not allowed from config')

    def extract_prop(self, prop):
        prop_files = [
            '/var/lib/lxc/android/rootfs/vendor/build.prop',
            '/android/vendor/build.prop',
            '/vendor/build.prop',
            '/var/lib/lxc/android/rootfs/odm/etc/build.prop',
            '/android/odm/etc/build.prop',
            '/odm/etc/build.prop',
            '/vendor/odm_dlkm/etc/build.prop'
        ]

        for file in prop_files:
            if exists(file):
                prop_file = file
                break

        with open(prop_file, 'r') as f:
            for line in f:
                if line.startswith(prop):
                    return line.split('=')[1].strip()

        return ''

    def parse_ids(self, ids_path, vendor_id, device_id):
        vendor_name = None
        device_name = None
        with open(ids_path, 'r') as file:
            vendor_section = False
            for line in file:
                if line.startswith(vendor_id.lower()):
                    vendor_name = line.split(' ', 1)[1].strip()
                    vendor_section = True
                elif vendor_section and line.startswith('\t' + device_id.lower()):
                    device_name = line.split(' ', 1)[1].strip()
                    break
                elif not line.startswith('\t') and not line.startswith('#'):
                    vendor_section = False
        return vendor_name, device_name

    def parse_pci_devices(self):
        pci_devices = []
        sys_bus_pci_path = '/sys/bus/pci/devices/'
        pci_ids_path = '/usr/share/misc/pci.ids'

        if not exists(sys_bus_pci_path):
            return ""

        for device_folder in listdir(sys_bus_pci_path):
            device_path = join(sys_bus_pci_path, device_folder)
            device_info = {
                'vendor_id': '',
                'device_id': '',
                'vendor_name': '',
                'device_name': '',
                'version': ''
            }

            try:
                with open(join(device_path, 'vendor'), 'r') as file:
                    device_info['vendor_id'] = file.read().strip()[2:]  # Remove leading '0x'
            except FileNotFoundError:
                pass

            try:
                with open(join(device_path, 'device'), 'r') as file:
                    device_info['device_id'] = file.read().strip()[2:]  # Remove leading '0x'
            except FileNotFoundError:
                pass

            if not device_info['vendor_id'] or not device_info['device_id']:
                continue

            try:
                with open(join(device_path, 'revision'), 'r') as file:
                    device_info['version'] = str(int(file.read().strip(), 16))
            except FileNotFoundError:
                device_info['version'] = '1'

            vendor_name, device_name = self.parse_ids(pci_ids_path, device_info['vendor_id'], device_info['device_id'])
            device_info['vendor_name'] = vendor_name if vendor_name else device_info['vendor_id']
            device_info['device_name'] = device_name if device_name else device_info['device_id']
            device_info['version'] = device_info['version'] if device_info['version'] else '1'

            pci_devices.append(device_info)

        return pci_devices

    def parse_usb_devices(self):
        usb_devices = []
        sys_bus_usb_path = '/sys/bus/usb/devices/'
        usb_ids_path = '/usr/share/misc/usb.ids'

        if not exists(sys_bus_usb_path):
            return ""

        for device_folder in listdir(sys_bus_usb_path):
            device_path = join(sys_bus_usb_path, device_folder)
            device_info = {
                'vendor_id': '',
                'device_id': '',
                'vendor_name': '',
                'device_name': '',
                'version': '',
                'serial' : ''
            }

            try:
                with open(join(device_path, 'idVendor'), 'r') as file:
                    device_info['vendor_id'] = file.read().strip()
            except FileNotFoundError:
                pass

            try:
                with open(join(device_path, 'idProduct'), 'r') as file:
                    device_info['device_id'] = file.read().strip()
            except FileNotFoundError:
                pass

            if not device_info['vendor_id'] or not device_info['device_id']:
                continue

            try:
                with open(join(device_path, 'serial'), 'r') as file:
                    device_info['serial'] = file.read().strip()
            except FileNotFoundError:
                pass

            try:
                with open(join(device_path, 'version'), 'r') as file:
                    device_info['version'] = str(int(float(file.read().strip())))
            except FileNotFoundError:
                device_info['version'] = '1'

            vendor_name, device_name = self.parse_ids(usb_ids_path, device_info['vendor_id'], device_info['device_id'])
            device_info['vendor_name'] = vendor_name if vendor_name else device_info['vendor_id']
            device_info['device_name'] = device_name if device_name else device_info['device_id']
            device_info['version'] = device_info['version'] if device_info['version'] else '1'
            device_info['serial'] = device_info['serial'] if device_info['serial'] else ''

            usb_devices.append(device_info)

        return usb_devices

    def parse_scsi_devices(self):
        scsi_devices = []
        sys_scsi_generic_path = '/sys/class/scsi_generic/'

        if not exists(sys_scsi_generic_path):
            return ""

        for device_folder in listdir(sys_scsi_generic_path):
            device_path = join(sys_scsi_generic_path, device_folder, 'device')
            device_info = {
                'vendor': '',
                'device': '',
                'version': '',
                'serial': ''
            }

            try:
                with open(join(device_path, 'vendor'), 'r') as file:
                    device_info['vendor'] = file.read().strip()
            except FileNotFoundError:
                pass

            try:
                with open(join(device_path, 'model'), 'r') as file:
                    device_info['device'] = file.read().strip()
            except FileNotFoundError:
                pass

            try:
                with open(join(device_path, 'rev'), 'r') as file:
                    device_info['version'] = file.read().strip()
            except FileNotFoundError:
                pass

            try:
                with open(join(device_path, 'vpd_pg80'), 'rb') as file:
                    binary_content = file.read().strip()

                    # drop all non printable parts
                    device_info['serial'] = ''.join(chr(byte) for byte in binary_content if 32 <= byte <= 126)
            except FileNotFoundError:
                pass

            if not device_info['vendor'] or not device_info['device']:
                continue

            device_info['version'] = device_info['version'] if device_info['version'] else '1'

            if not any(d['vendor'] == device_info['vendor'] and d['device'] == device_info['device'] and d['version'] == device_info['version'] for d in scsi_devices):
                scsi_devices.append(device_info)

        return scsi_devices

    def parse_os_release(self, key):
        with open('/etc/os-release', 'r') as file:
            for line in file:
                if line.startswith(key + '='):
                    value = line.split('=', 1)[1].strip().strip('"').strip("'")
                    return value
        return None

    def extract_dt_compat(self):
        file_path = '/sys/firmware/devicetree/base/compatible'
        with open(file_path, 'rb') as file:
            content = file.read()

        output = content.replace(b'\x00', b'\n').decode('utf-8').strip()

        return output.splitlines()[-1]

    def read_hw_info(self, file_path):
        try:
            with open(file_path, 'r') as file:
                return file.read()
        except IOError as e:
            print(f"Error reading file {file_path}: {e}")
            return ""

    def parse_hw_info(self, hw_info):
        pattern = r'\[([^\]]+)\]:([\s\S]*?)(?=\n\[|\Z)'
        matches = re.findall(pattern, hw_info, re.MULTILINE)

        parsed_info = {}
        for match in matches:
            key = match[0].strip()
            value = match[1].strip()
            if key.lower() in ["battery", "flash", "flash list", "flash life", "audioparamversioninfo"]:
                continue
            details = {}
            lines = value.split('\n')
            for line in lines:
                if 'chip:' in line:
                    details['chip'] = line.split('chip:')[1].strip()
                elif 'vendor:' in line:
                    details['vendor'] = line.split('vendor:')[1].strip()
                elif 'id:' in line:
                    details['id'] = line.split('id:')[1].strip()

            parsed_info[key] = details

        return parsed_info

async def main():
    bus = await MessageBus(bus_type=BusType.SYSTEM).connect()
    loop = asyncio.get_running_loop()
    fwupd_interface = FWUPDInterface(loop, bus)
    bus.export('/', fwupd_interface)
    await bus.request_name('org.freedesktop.fwupd')
    await bus.wait_for_disconnect()

asyncio.run(main())
